package com.topgroup.capa.base.view.screen;

import java.util.Date;
import java.util.List;

import com.topgroup.capa.base.business.service.PracticeServiceMockImpl;
import com.topgroup.capa.base.domain.model.Producto;
import com.topgroup.capa.base.domain.model.TipoProducto;
import com.topgroup.capa.base.persistence.filter.ProductoFilter;
import com.topgroup.capa.base.view.components.CleanButton;
import com.topgroup.capa.base.view.components.NewProductButton;
import com.topgroup.capa.base.view.components.ProductsTable;
import com.topgroup.capa.base.view.components.SearchButton;
import com.topgroup.capa.base.view.components.TypesCombo;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

@SuppressWarnings("serial")
public class PracticeScreen extends CustomComponent {

	private static final long serialVersionUID = -4479639018984308437L;
//	private PracticeServiceMockImpl practiceMock = new PracticeServiceMockImpl();
//	private VerticalLayout mainLayout;
//	private Window mainWindow;
//	private TextField codigo = new TextField("Codigo");
//	private DateField fechaAlta = new DateField("Fecha de alta");
//	private ComboBox tipoProducto;
//	private Button search = new SearchButton();
//	private Button clean = new CleanButton();
//	private Button newProduct = new NewProductButton();
//	private Table tablaProductos;

	private VerticalLayout mainLayout;
	private TextField codigo;
	private ComboBox tipoProducto;
	private Button search;
	private Button clean;
	private Button newProduct;
	private DateField fechaAlta;

	private Window mainWindow;
	private Table tablaProductos;
	private PracticeServiceMockImpl practiceService = new PracticeServiceMockImpl();

	public PracticeScreen(Window window) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.mainWindow = window;
	}

	@AutoGenerated
	private void buildMainLayout() {
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		setWidth("100.0%");
		setHeight("100.0%");
		Label label = new Label("Filtro de productos");
		label.addStyleName("title");
		mainLayout.addComponent(label);
		mainLayout.addComponent(formularioBusquedaProductos());
		Label label2 = new Label("Productos encontrados");
		label2.addStyleName("title");
		mainLayout.addComponent(label2);
		tablaProductos = new ProductsTable();
		mainLayout.addComponent(tablaProductos);
	}

	public Component formularioBusquedaProductos() {
		FormLayout form = new FormLayout();
		form.setMargin(true);
		codigo = new TextField("Codigo");
		form.addComponent(codigo);
		this.setCombo(new TypesCombo());
		tipoProducto.setCaption("Tipo Producto");
		form.addComponent(tipoProducto);
		fechaAlta = new DateField("Fecha de alta");
		fechaAlta.setValue(new Date());
		form.addComponent(fechaAlta);
		form.addComponent(botonesFormulario());
		return form;
	}

	public void setCombo(ComboBox combo) {
		this.tipoProducto = combo;
	}

	public Component botonesFormulario() {
		HorizontalLayout botones = new HorizontalLayout();
		search = new SearchButton();
		clean = new CleanButton();
		newProduct = new NewProductButton();
		botones.setSpacing(true);
		botones.setHeight("30px");
		botones.addComponent(search);
		botones.addComponent(clean);
		botones.addComponent(newProduct);

		search.addListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				filtrarTabla();
			}
		});

		clean.addListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				cargarTabla();
				codigo.setValue("");
				tipoProducto.setValue(null);
			}
		});

		newProduct.addListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				NewProductoWindow popup = new NewProductoWindow(practiceService);

				popup.addListener(new CloseListener() {
					@Override
					public void windowClose(CloseEvent event) {
						cargarTabla();
					}
				});
				mainWindow.addWindow(popup);
			}
		});

		return botones;
	}

	private void cargarTabla() {

		List<Producto> productos = practiceService.findAll();
		BeanItemContainer<Producto> p = new BeanItemContainer<Producto>(Producto.class);
		p.addNestedContainerProperty("tipoProducto.descripcion");
		p.addAll(productos);

		tablaProductos.setContainerDataSource(p);
		tablaProductos.setVisibleColumns(new String[] { "codigo", "descripcion", "tipoProducto.descripcion" });
		tablaProductos.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Tipo de Producto" });
		tablaProductos.setColumnCollapsingAllowed(true);
		tablaProductos.setSelectable(true);
		tablaProductos.setWidth("100%");
		tablaProductos.setPageLength(10);
	}

	private void filtrarTabla() {
		ProductoFilter filtroDeProductos = new ProductoFilter();

		if (this.tipoProducto.getValue() != null) {
			TipoProducto tipoProducto = (TipoProducto) this.tipoProducto.getValue();
			filtroDeProductos.setIdTipoProducto(tipoProducto.getId());
		} else {
			filtroDeProductos.setIdTipoProducto(null);
		}
		filtroDeProductos.setCodigo(codigo.getValue().toString());

		List<Producto> productos = practiceService.filter(filtroDeProductos);

		BeanItemContainer<Producto> producto = new BeanItemContainer<Producto>(Producto.class);
		producto.addNestedContainerProperty("tipoProducto.descripcion");
		producto.addAll(productos);

		tablaProductos.setContainerDataSource(producto);
		tablaProductos.setVisibleColumns(new String[] { "codigo", "descripcion", "tipoProducto.descripcion" });
		tablaProductos.setColumnHeaders(new String[] { "Codigo", "Descripcion", "Tipo de Producto" });
		tablaProductos.setColumnCollapsingAllowed(true);
		tablaProductos.setSelectable(true);
		tablaProductos.setWidth("100%");
		tablaProductos.setPageLength(10);
	}
}
